import sqlite3
import time
from datetime import datetime
from typing import List, Any, Union
import bittrex
import bot_class
from boto.s3.connection import S3Connection
from os import environ


TOKEN = environ['TOKEN']


orders_db = sqlite3.connect("orders.db")  # orders(uid, status, date_open, date_closed)
messages_db = sqlite3.connect("messages.db")  # messages(id, text, date)
cursor_orders = orders_db.cursor()
cursor_messages = messages_db.cursor()


# cursor_orders.execute("""DELETE FROM orders""")
# orders_db.commit()


# cursor_messages.execute("""CREATE TABLE messages
# (id_msg,text_msg,date_msg)
# """)

def signals_from_fostage(bot, update):
    if bot.from_chat_id(update) == -1001149814828:  # id_chat Forstage team
        msg_text = update['message']['text'].split()
        if '–ü–æ–∫—É–ø–∫–∞' in msg_text[1][1:]:
            pair = msg_text[0].strip('üèé').split('/')
            pair = pair[1] + '-' + pair[0]

            buy = float(msg_text[2][:-1])
            sell = list(map(float, (msg_text[4][:-1], msg_text[6][:-1], msg_text[8][:-1])))
            bot.send_message(bot.get_chat_id(update),
                             '{} –∫—É–ø–∏—Ç—å –ø–æ {:.8f},\n–¶–µ–ª–∏: {:.8f}, {:.8f}, {:.8f}'.format(pair, buy, *sell))

            if pair in bittrex.all_markets():  # –µ—Å–ª–∏ –ø–∞—Ä–∞ –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ Bittrex
                bot.send_message(bot.get_chat_id(update), '–£–†–ê! –≠—Ç–∞ –ø–∞—Ä–∞ –µ—Å—Ç—å –Ω–∞ –ë–∏—Ç—Ç—Ä–µ–∫—Å!')
                buy_order_bittrex_forstage(buy, pair, bot, update)


        else:
            print('–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–∞')
            bot.send_message(bot.get_chat_id(update), '–ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–∞')
    else:
        bot.send_message(bot.get_chat_id(update), '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —á–∞—Ç–∞ Forsage Team')


# –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ Bittrex
def buy_order_bittrex_forstage(buy, pair, bot, update):
    buy = buy / 2  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ü–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ —É–º–µ–Ω—å—à–∏–Ω–∞ –≤ 2 —Ä–∞–∑–∞, —á—Ç–æ–±—ã –æ—Ä–¥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    # quantity = float(bittrex.balance_btc(
    #     'BTC')) * 0.04 / buy  # 0.04 - –æ—Ä–¥–µ—Ä –Ω–∞ 4% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ BTC
    quantity = 0.0005 / buy  # –æ—Ä–¥–µ—Ä –Ω–∞ —Å—É–º–º—É 0.0005 BTC
    buy_order, text_buy = bittrex.buylimit(pair, buy, quantity)
    print(buy_order)

    # –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –≤–Ω–æ—Å–∏–º –≤ –±–∞–∑—É –æ—Ä–¥–µ—Ä–æ–≤
    if buy_order['success']:
        info_order = bittrex.order_info(buy_order['result']['uuid'])
        value_msg: List[Any, Any, Any, Any] = [info_order['result']['OrderUuid'], \
                                               info_order['result']['Exchange'], \
                                               info_order['result']['Opened'], \
                                               info_order['result']['ImmediateOrCancel']]

        cursor_orders.execute(
            """INSERT INTO orders
               VALUES (?,?,?,?)""",
            value_msg
        )
        orders_db.commit()
        bot.send_message(bot.get_chat_id(update),
                         f'{text_buy} –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {pair.split("-")[1]} '
                         f'\n–ø–æ —Ü–µ–Ω–µ: {buy:.8f}\n–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.8f} '
                         f'\n{value_msg[0]}')
    else:
        bot.send_message(bot.get_chat_id(update), f"–û—Ä–¥–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n{buy_order['message']}")

    # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–µ–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞


def new_msg(bot_telegram):
    # id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor_messages.execute("SELECT id_msg FROM messages ORDER BY date_msg DESC LIMIT 1")
    last_id_msg = cursor_messages.fetchone()

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
    update = bot_telegram.get_updates(offset=last_id_msg, last=True)
    update.update({'Not empty': True})

    if update['update_id'] != last_id_msg[0]:
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –≤ –±–∞–∑—É
        value_msg: List[Union[datetime, Any]] = [update['update_id'], update['message']['text'],
                                                 datetime.fromtimestamp(update['message']['date'])]
        cursor_messages.execute(
            """INSERT INTO messages
               VALUES (?,?,?)""",
            value_msg
        )
        messages_db.commit()
    else:
        update = {'message': {'chat': {'id': update['message']['chat']['id']}}, 'Not empty': False}

    return update


def check_order_close(bot, update):
    cursor_orders.execute("SELECT * FROM orders")

    while True:
        uid_order = cursor_orders.fetchone()
        if uid_order:
            uid_order = uid_order[0]

        if uid_order == None:
            break
        order_info = bittrex.order_info(str(uid_order))
        if order_info['result']['Closed']:
            cursor_orders.execute('DELETE FROM orders where uid = ?', (uid_order,))
            orders_db.commit()
            orders_db.execute("VACUUM")
            text_msg = (f"–û—Ä–¥–µ—Ä:\n{order_info['result']['Exchange']}\n"
                        f"–Ω–∞ –ø–æ —Ü–µ–Ω–µ {order_info['result']['Limit']:.8f} BTC\n"
                        f"uid: {uid_order}\n–∑–∞–∫—Ä—ã—Ç –≤ {order_info['result']['Closed']}"
                        f"–û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:{order_info['result']['QuantityRemaining']}")
            bot.send_message(bot.get_chat_id(update), text_msg)


# –°–≤–æ–π –∫–ª–∞—Å—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–π
class ScriptError(Exception):
    pass


if __name__ == '__main__':
    while True:
        # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        bot = bot_class.BotHandler(TOKEN)

        # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        last_msg = new_msg(bot)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–∞—Ç–∞ Forsage Team
        if last_msg['Not empty']:
            signals_from_fostage(bot, last_msg)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
        check_order_close(bot, last_msg)

        print('–ù–æ–≤—ã–π —Ü–∏–∫–ª')
        time.sleep(1)
